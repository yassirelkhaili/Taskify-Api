openapi: 3.0.3
info:
  title: Taskify Api - OpenAPI 3.0
  description: |-
    This is a Task manager Api based on the OpenAPI 3.0 specification.
    
    Some useful links:
    - [The Taskify Api repository](https://github.com/yassirelkhaili/eduservice-sanctum)
    - [The source API definition for the Taskify Api](https://github.com/yassirelkhaili/eduservice-sanctum/api-specs.yml)
  termsOfService: https://github.com/yassirelkhaili/eduservice-sanctum/COPYING
  contact:
    email: elkhailiyassir@gmail.com
  license:
    name: GPL-3.0-or-later
    url: https://github.com/yassirelkhaili/eduservice-sanctum/COPYING
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ELKHAILIYASSIR/TaskifyAPI/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ELKHAILIYASSIR/sanctum-taskify/1.0.0
  - description: Taskify Api Url
    url: http://localhost:8000
tags:
  - name: Tasks
    description: Manages Tasks
  - name: User
    description: Authenticated User or noContent when Unauthorized
paths:
  /tasks:
    put:
      tags:
        - Tasks
      summary: Update a task
      description: Updates the details of an existing task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found.
    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Adds a new task to the store.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    get:
      tags:
        - Tasks
      summary: List all tasks
      description: Retrieves a list of all tasks.
      responses:
        '200':
          description: A list of tasks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get a task by ID
      description: Returns a single task based on the ID provided.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found.
    post:
      tags:
        - Tasks
      summary: Update task with form data
      description: Updates a task in the store with form data.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: Task updated successfully.
    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Deletes a task based on the ID provided.
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully.
        '404':
          description: Task not found.
  /user:
    get:
      tags:
        - User
      responses:
        '200':
          description: Authenticated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Task:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        status:
          type: string
          description: task status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: task
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '#default'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header